{"version":3,"sources":["webpack:///./timer.js","webpack:///./index.js"],"names":["createsTwoDigitNum","value","String","padStart","selector","targetDate","this","element","document","querySelector","date","Date","dateNow","now","timerTime","textContent","getSeconds","Math","floor","getMinutes","getHours","getDays","render","timerRef","querySelectorAll","timerNow","forEach","item","i","init","intervalID","setInterval","clearInterval"],"mappings":"iKAmDA,SAASA,EAAoBC,GACrB,OAAOC,OAAOD,GAAOE,SAAS,EAAG,KCjDlB,I,WDFnB,WAAYC,EAAUC,GAClBC,KAAKC,QAAUC,SAASC,cAAcL,GACtCE,KAAKD,WAAaA,EAElB,IAAMK,EAAO,IAAIC,KAAML,KAAKD,YACtBO,EAAUD,KAAKE,MACrBP,KAAKQ,UAAYJ,EAAOE,EAEDJ,SAASC,cAAc,iBAC/BM,YAAeT,KAAKD,W,2BAGvCW,WAAA,WAEI,OAAOhB,EADKiB,KAAKC,MAAOZ,KAAKQ,UAAL,IAAgC,O,EAG5DK,WAAA,WAEI,OAAOnB,EADKiB,KAAKC,MAAOZ,KAAKQ,UAAL,KAAD,O,EAG3BM,SAAA,WAEI,OAAOpB,EADQiB,KAAKC,MAAOZ,KAAKQ,UAAL,MAAD,Q,EAG9BO,QAAA,WAEI,OAAOrB,EADMiB,KAAKC,MAAMZ,KAAKQ,UAAL,S,EAG5BQ,OAAA,WACI,IAAMC,EAAWjB,KAAKC,QAAQiB,iBAAiB,UACzCC,EAAW,CACbnB,KAAKe,UACLf,KAAKc,WACLd,KAAKa,aACLb,KAAKU,cAETO,EAASG,SAAQ,SAACC,EAAMC,GAAP,OAAaD,EAAKZ,YAAL,GAAuBU,EAASG,O,EAElEC,KAAA,WAAM,WACIC,EAAaC,aAAY,WAC3B,EAAKjB,WAAY,IACd,EAAKA,WAAa,IACjB,EAAKA,UAAY,EACjBkB,cAAcF,IAElB,EAAKR,WACN,M,KC5CY,CAAmB,WAAY,gBACvCO,S","file":"main.95fda315ac59054dd1fd.js","sourcesContent":["class CountdownTimer {\r\n    constructor(selector, targetDate){\r\n        this.element = document.querySelector(selector);\r\n        this.targetDate = targetDate;        \r\n\r\n        const date = new Date (this.targetDate);\r\n        const dateNow = Date.now();\r\n        this.timerTime = date - dateNow;\r\n        \r\n        const enteredDateRef = document.querySelector('.entered-date');\r\n        enteredDateRef.textContent = (this.targetDate); \r\n       \r\n    }\r\n    getSeconds(){\r\n        const sec = Math.floor((this.timerTime % (1000 * 60)) / 1000);\r\n        return createsTwoDigitNum(sec);\r\n    }\r\n    getMinutes(){\r\n        const min = Math.floor((this.timerTime % (1000 * 60 * 60)) / (1000 * 60));\r\n        return createsTwoDigitNum(min);\r\n    }\r\n    getHours(){\r\n        const houers = Math.floor((this.timerTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n        return createsTwoDigitNum(houers);\r\n    }\r\n    getDays(){\r\n        const days = Math.floor(this.timerTime / (1000 * 60 * 60 * 24));\r\n        return createsTwoDigitNum(days);\r\n    }\r\n    render(){\r\n        const timerRef = this.element.querySelectorAll('.value');\r\n        const timerNow = [\r\n            this.getDays(),\r\n            this.getHours(),\r\n            this.getMinutes(),\r\n            this.getSeconds()\r\n        ];\r\n        timerRef.forEach((item, i) => item.textContent = (`${timerNow[i]}`));       \r\n    }\r\n    init(){\r\n        const intervalID = setInterval(() => {\r\n            this.timerTime -=1000;\r\n            if(this.timerTime <= 0){\r\n                this.timerTime = 0;\r\n                clearInterval(intervalID);\r\n              }\r\n            this.render();\r\n        }, 1000)\r\n    }   \r\n}\r\n\r\nfunction createsTwoDigitNum (value) {\r\n        return String(value).padStart(2, '0');        \r\n    }\r\nfunction createsThreeDigitNum (value) {\r\n    return String(value).padStart(3, '0');        \r\n}    \r\n\r\nexport default CountdownTimer;\r\n\r\n\r\n","import './styles.css';\nimport CountdownTimer from './timer';\n\nconst countdownTimer = new CountdownTimer('#timer-1', 'Apr 12, 2021');\ncountdownTimer.init();\n\n\n\n"],"sourceRoot":""}